global:
  domain: argocd.dataplumbers.ch
server:
  # Disable SSL to allow to configure TLS connection on the ingress
  insecure: false
  service:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  ingress:
      enabled: true
      controller: generic
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      ingressClassName: "nginx"
      hostname: "argocd.dataplumbers.ch"
      tls: 
        - hosts:
            - "argocd.dataplumbers.ch"
          secretName: argocd-server-tls
      path: / 
configs:
  params:
    rbac:
      policy.csv: |
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, *, *, allow
        p, role:org-admin, logs, get, *, allow
        p, role:org-admin, exec, create, */*, allow
        g, jan.matter@dataplumbers.ch, role:org-admin
      policy.default: role:readonly
      scopes: "[groups]"
      policy.matchMode: "glob"
  cm:
    dex.config: |
      connectors:
        - type: oidc
          id: infomaniak
          name: Infomaniak
          config:
            issuer: https://login.infomaniak.com
            clientID: $INFOMANIAK_CLIENT_ID
            clientSecret: $INFOMANIAK_CLIENT_SECRET
            redirectURI: https://argocd.dataplumbers.ch/auth/callback
            scopes: "[openid, profile, email, groups]"
          insecureSkipVerify: true
dex:
  enabled: true
  env:
    - name: INFOMANIAK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: infomaniak-argocd-oauth-credentials
          key: clientID
    - name: INFOMANIAK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: infomaniak-argocd-oauth-credentials
          key: secret
          

